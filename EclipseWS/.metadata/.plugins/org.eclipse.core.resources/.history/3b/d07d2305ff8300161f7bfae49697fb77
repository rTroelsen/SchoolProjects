package dicegames;

/**
 * This class models one pair of dices. This is useful for games where you have to
 * throw two dice at once.
 */
public class PairOfDices {

    /**
     * The first die in the pair.
     */
    private Die die1;

    /**
     * The second die in the pair.
     */
    private Die die2;

    /**
     * Amount of rolls made since application start
     */
    private int rolls = 0;

    /**
     * Amount of sixes rolled since first roll
     */
    private int six = 0;
    
    /**
     * Amount of fives rolled since first roll
     */
    private int five = 0;
    
    /**
     * Amount of fours rolled since first roll
     */
    private int four = 0;
    
    /**
     * Amount of threes rolled since first roll
     */
    private int three = 0;
    
    /**
     * Amount of twos rolled since first roll
     */
    private int two = 0;
    
    /**
     * Amount of ones rolled since first roll
     */
    private int one = 0;

    /**
     * Amount of times dices has had the same value
     */
    private int sameValue = 0;

    /**
     * Holds the value of the highest roll made
     */
    private int highestRoll = 0;
    
    /**
     * Constructor for objects of class PairOfDices with no parameters
     */
    public PairOfDices() {
        die1 = new Die(6);
        die2 = new Die(6);
    }
    
    /**
     * Constructor for objects of class PairOfDices with parameter 'sides'
     * @param sides
     */
    public PairOfDices(int sides) {
        die1 = new Die(sides);
        die2 = new Die(sides);
    }
    
    /**
     * Method calls roll on both dices of the object
     */
    public void rollBothDices() {
        die1.roll();
        die2.roll();

        /*
         * Checks the value of die1
         */
        incrementFaceCount(die1);
        /*
         *  Checks the value of die2
         */
        incrementFaceCount(die2);
        
        /*
         * Checks if die1's value is the same as die2's
         * if it is, add one to sameValue
         */
        if (die1.getFaceValue() == die2.getFaceValue()) {
            setSameValue(getSameValue() + 1);
        }

        /*
         *  Checks if the value of the new roll is greater than the highest roll
         */
        if (die1.getFaceValue() + die2.getFaceValue() > highestRoll) {
            // if it is, we assign the new rolls value to highestRoll
            setHighestRoll(die1.getFaceValue() + die2.getFaceValue());
        }
        
        setRolls(getRolls() + 1); //add one to amount of rolls
    }

    private void incrementFaceCount(Die die) {
        /*
         * Increments the face count of die
         * Check the face of the given die, and increment the
         * amount of times this face has been rolled
         */
        if (die.getFaceValue() == 6) {
            setSix(getSix() + 1);
        }
        else if (die.getFaceValue() == 5) {
            setFive(getFive() + 1);
        }
        else if (die.getFaceValue() == 4) {
            setFour(getFour() + 1);
        }
        else if (die.getFaceValue() == 3) {
            setThree(getThree() + 1);
        }
        else if (die.getFaceValue() == 2) {
            setTwo(getTwo() + 1); // 
        }
        else if (die.getFaceValue() == 1) {
            setOne(getOne() + 1);
        }
    }
    
    /**
     * Returns the sum of the pair of dices
     * @return
     */
    public int sumOfDices() {
        return die1.getFaceValue() + die2.getFaceValue();
    }
    
    /**
     * Resets all values of the PairOfDices object
     */
    
    public void resetPairOfDices() {
        setRolls(0);
        setSix(0);
        setFive(0);
        setOne(0);
        setSameValue(0);
        setHighestRoll(0);
    }
    
    /**
     * @return the sameValue
     */
    public int getSameValue() {
        return sameValue;
    }
    
    /**
     * @param sameValue the sameValue to set
     */
    public void setSameValue(int sameValue) {
        this.sameValue = sameValue;
    }
    
    /**
     * @return the highestRoll
     */
    public int getHighestRoll() {
        return highestRoll;
    }
    
    /**
     * @param highestRoll the highestRoll to set
     */
    public void setHighestRoll(int highestRoll) {
        this.highestRoll = highestRoll;
    }
    
    /**
     * @return the rolls
     */
    public int getRolls() {
        return rolls;
    }
    
    /**
     * @param rolls the rolls to set
     */
    public void setRolls(int rolls) {
        this.rolls = rolls;
    }
    
    /**
     * @return the six
     */
    public int getSix() {
        return six;
    }
    
    /**
     * @param six the six to set
     */
    public void setSix(int six) {
        this.six = six;
    }
    
    /**
     * @return the five
     */
    public int getFive() {
        return five;
    }
    
    /**
     * @param five the five to set
     */
    public void setFive(int five) {
        this.five = five;
    }

    /**
     * @return the four
     */
    public int getFour() {
        return four;
    }
    
    /**
     * @param four the four to set
     */
    public void setFour(int four) {
        this.four = four;
    }

    /**
     * @return the three
     */
    public int getThree() {
        return three;
    }

    /**
     * @param three the three to set
     */
    public void setThree(int three) {
        this.three = three;
    }

    /**
     * @return the two
     */
    public int getTwo() {
        return two;
    }

    /**
     * @param two the two to set
     */
    public void setTwo(int two) {
        this.two = two;
    }

    /**
     * @return the one
     */
    public int getOne() {
        return one;
    }
    
    /**
     * @param one the one to set
     */
    public void setOne(int one) {
        this.one = one;
    }
}
