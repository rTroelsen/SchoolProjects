package dicegames;

/**
 * This class models one pair of dices. This is useful for games where you have to
 * throw two dice at once.
 */
public class PairOfDices {
    
    /**
     * The first die in the pair.
     */
    private Die die1;
    
    /**
     * The second die in the pair.
     */
    private Die die2;
    
    /**
     * Amount of rolls made since application start
     */
    public int rolls = 0;
    
    /**
     * Amount of sixes rolled since first roll
     */
    public int six = 0;

    /**
     * Amount of fives rolled since first roll
     */
    public int five = 0;

    /**
     * Amount of ones rolled since first roll
     */
    public int one = 0;
    
    /**
     * Amount of times dices has had the same value
     */
    public int sameValue = 0;
    
    /**
     * Holds the value of the highest roll made
     */
    public int highestRoll = 0;

    /**
     * Constructor for objects of class PairOfDices with no parameters
     */
    public PairOfDices() {
        die1 = new Die(6);
        die2 = new Die(6);
    }

    /**
     * Constructor for objects of class PairOfDices with parameter 'sides'
     * @param sides
     */
    public PairOfDices(int sides) {
        die1 = new Die(sides);
        die2 = new Die(sides);
    }

    /**
     * Method calls roll on both dices of the object
     */
    public void rollBothDices() {
        die1.roll();
        die2.roll();
        
        /**
         * Checks if the value of die1 is 6, 5 or 1
         */
        if (die1.getFaceValue() == 6) { // is it 6?
            six++; // Yes! Add one to variable 'six'
        }
        else if (die1.getFaceValue() == 5) { // is it 5?
            five++; // Yes! Add one to variable 'five'
        }
        else if (die1.getFaceValue() == 1) { // is it 1?
            one++; // Yes! Add one to variable 'one'
        }
        
        /**
         *  Checks if the value of die2 is 6, 5 or 1
         */
        if (die2.getFaceValue() == 6) { // is it 6?
            six++; // Yes! Add one to variable 'six'
        }
        else if (die2.getFaceValue() == 5) { // is it 5?
            five++; // Yes! Add one to variable 'five'
        }
        else if (die2.getFaceValue() == 1) { // is it 1?
            one++; // Yes! Add one to variable 'one'
        }
        
        /**
         * Checks if die1's value is the same as die2's
         * if it is, add one to sameValue
         */
        if (die1.getFaceValue() == die2.getFaceValue()) {
            sameValue++;
        }
        
        /**
         *  Checks if the value of the new roll is greater than the highest roll
         */
        if (die1.getFaceValue() + die2.getFaceValue() > highestRoll) {
            // if it is, we assign the new rolls value to highestRoll
            highestRoll = die1.getFaceValue() + die2.getFaceValue();
        }

        rolls++; //add one to amount of rolls
    }

    /**
     * Returns the sum of the pair of dices
     * @return
     */
    public int sumOfDices() {
        return die1.getFaceValue() + die2.getFaceValue();
    }

    /**
     * Resets all values of the PairOfDices object
     */

    public void resetPairOfDices() {
        rolls = 0;
        six = 0;
        five = 0;
        one = 0;
        sameValue = 0;
        highestRoll = 0;
    }
    
}
